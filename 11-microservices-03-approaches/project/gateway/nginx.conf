user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    #include /etc/nginx/conf.d/*.conf;

    server {

        listen 8080 default_server;
        server_name _;

        resolver 127.0.0.11;        #  Обязательный параметр для корректного поиска контейнеров по имени службы docker-compose

        location = /register {
                # anonim
                proxy_pass http://security:3000/v1/user;     #  Не реализованный метод!
        }

        location = /token {
            # anonim
            proxy_pass http://security:3000/v1/token;
        }

        location = /user {
            auth_request /auth;
            proxy_pass http://security:3000/v1/user;     #  Не реализованный метод!
        }

        location = /upload {
            auth_request /auth;
            proxy_pass http://uploader:3000/v1/upload;
        }

        location ~ /images/(.*) {
            # anonim
            proxy_pass http://storage:9000/data/$1;     #  URL сформирован из имени сервиса в docker-compose и названии bucket-а Minio
        }

        location = /auth {
            # check token in header Authorization by request "security GET /v1/token/validation"
            internal;
            proxy_pass http://security:3000/v1/token/validation;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
        }

        location /check {
            auth_request /auth;
            try_files notExistsfile @verified;
        }

        location @verified {
            internal;
            return 200 "NGINX Rulezz!\nAuth is working!!!\n";
        }
    }
}
